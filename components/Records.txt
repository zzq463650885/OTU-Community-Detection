# Records of experiments
                        
# Ideas:
    增加重构边的线性权重中间 8*8 矩阵，而非直接向量相乘
    损失函数优化（谨慎增加新损失函数）
    使用网格调参法    
特征或许可以直接用bio72而不是dpwk数据。(bad)
GCN可以改成ImprovedGCN
louvain 算是目前市面上提到的和使用过的最常用的社区发现算法之一了，除此之外就是     infomap


# Total Scores         
    method     EdMot     LabelProp    SCD       GEMSEC    Spectral   Louvain       OTUCD   
    time       77 min    5 min        45 min    4h        3 min      2min         
    meta72     0.0182    0.5332       0.3128    0.0531    0.4100     0.5872        0.5371         
    dpwk(0.5)  0.0035    0.5965       0.5534    0.4448    0.6568     0.6798        0.7274
    n2v(0.8)   0         0.5631       0.5713    0.4275    0.6546     0.7176        0.7267
    lle(0.5)   0         0.7943       0.6969    0.3922    0.3614     0.8092        0.7447
    line(0.7)  0         0.5905       0.6928    0.5468    0.7289     0.7812        0.7943
# Notes
    Louvain to pearson、kneighbour、merged: good totally

# Transverse to draw    
                        meta72        dpwk      n2v       lle        line
    LabelProp           0.5332        0.7481    0.7435    0.7943     0.8429
    SCD                 0.3128        0.5534    0.5713    0.6969     0.6928
    GEMSEC              0.0531        0.4448    0.4275    0.3922     0.5468    
    Spectral            0.4100        0.6568    0.6546    0.3614     0.7289     
    Louvain             0.5872        0.6798    0.7176    0.8092     0.7812                   
    OTUCD               0.5371        0.7274    0.7267    0.7447     0.7943


# Specific Nocd Scores 
    ( default parameters: l2_reg:1e-2 lr:1e-3 dropout:0.5 epochs:1000 batch:20000 )       
    method     nocd     []      [32]     [64]     [128]     [256]       [512]       [1024]    [2048]    [4096]     
    time                2.5min  4min     5min     5min      10min       16min       31min     51min     3h
    bio72      0.5371   bad                       0.4930    0.5330      0.5371      0.5007    0.5345    0.5121
    dpwk(0.5)  0.7260   bad     0.6867   0.6731   0.7071    0.6832      0.7003      0.6902    0.6954    0.6858
    n2v(0.8)   0.7267   bad     0.7029   0.6852   0.7226    0.7214      0.7189      0.7236    0.7229    0.7196  
    lle(0.5)   0.7347   bad     0.7208   0.7231   0.7237    0.7253      0.7270      0.7248    0.7344    0.7200
    line(0.7)  0.7943   bad     0.7801   0.7913   0.7826    0.7618      0.7799      0.7943    0.7929    0.7848

# Specific Nocd Scores 
    ( default parameters: l2_reg:1e-2 lr:1e-3 dropout:0.5 epochs:1000 batch:20000 )        
    method     nocd   X_bio[512]  X_rand[512]   Imp_GCN[512]    [512,1024]    [512,512,1024]  [512,1024,1024,512] 
    time                          25min         1min            61min         107min          2h
    bio72                                                       0.5228        0.5252        
    dpwk(0.5)         0.6753      bad           0.6079          0.7064        0.7018          0.7083
    n2v(0.8)          0.6866      bad           0.6615          0.6984        0.6991          0.7267
    lle(0.5)          0.7238      bad           0.6477          0.7330        0.7347          0.7447
    line(0.7)         0.7750      bad           0.7379          0.7655        0.7671          0.7904

# dpwk 
# (default 512)n_clusters  [2, 3, 4, 5, 6, 7, 8] [9,10,11,12] [13,14,15] [17,18,19,20,21] [22, 23, 24, 25]
    [0.4022, 0.5417, 0.6139, 0.6439, 0.6722, 0.6829, 0.7070] [0.6798,0.6932,0.7228,0.7075] [:12]    
    [0.7193, 0.7104, 0.7150]  17:[0.7274,  0.7208,0.7138,0.7260,0.7125]  [0.7231, 0.7260, 0.7130, 0.7222] [:25]
    [26, 27, 28, 29, 30, 31]    [16,32,64,128] 
    [0.7235, 0.7260, 0.7231, 0.7216, 0.7219, 0.7149] [0.7250,0.7166,0.7116,0.6672]
# hidden layer [32]     [64]     [128]     [256]       [512]       [1024]    [2048]    [4096]
    0.6867   0.6731   0.7071    0.6832      0.7003      0.6902    0.6954    0.6858
# bad draw batch_size [10000, 20000, 30000, 40000]
    [0.6977, 0.7013, 0.6884, 0.6976]
# [balance_loss, stochastic_loss] [[True, True], [True, False], [False, True], [False, False]]
    [0.6966, 0.6940, 0.6856, 0.6688]
# weight_decay_list = [1e-1,1e-2,1e-3,1e-4]
    [0.6994, 0.6893, 0.6841, 0.6946]
# dropout_list = [0.1, ..., 0.9]
    0.7079, 0.6899, 0.6964, 0.6905, 0.7003, 0.6993, 0.7103, 0.6988, 0.6837
# lr_list = [1e-1,1e-2,1e-3,1e-4]
    [0.5260, 0.6825, 0.6948, 0.6721]
# batch_norm_list [True, False]
    [0.6987434024568999, -0.00428082510617247]

# hidden_sizes  [128, 128]  [128, 256]  [128, 512]  [128, 1024]  [256,128]  [256,256]  [256,512]
    0.6926 0.6804 0.7049 0.6944 0.6900 0.7000 0.6929 0.7036
    [[512, 128], [512, 256], [512, 512], [512, 1024], [1024, 128], [1024, 256], [1024, 512], [1024, 1024]]
    [ 0.6836, 0.6972, 0.7045, 0.7077, 0.7012, 0.6937, 0.6970, 0.6976]
    TODO 3层hidden
    [[128, 128, 128], [128, 128, 256], [128, 128, 512], [128, 128, 1024]]
[0.7104654909811189, 0.6752741503981582, 0.7074692898271284, 0.7051125124043972]
[[128, 256, 128], [128, 256, 256], [128, 256, 512], [128, 256, 1024]]
[0.7056043265266836, 0.70276529577744, 0.6888651437358152, 0.6904140652698355]
[[128, 512, 128], [128, 512, 256], [128, 512, 512], [128, 512, 1024]]
[0.6885197060223522, 0.6932701431890083, 0.7046134542084633, 0.7045297982219343]

# compare Labelprop 
# 40neigh is good